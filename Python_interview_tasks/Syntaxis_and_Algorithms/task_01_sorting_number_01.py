print("Enter 3 different numbers: A, B and C");   # Само задание и комментарии после кода. Скролльте вниз.
if a == b or a == c or b == c then:
    print("Entered numbers are not different, please repeat.");
a = input("Input first number (A): ");
b = input("Input second number (B): ");
c = input("Input three number (C): ");
if a > b then:
    1st_max, 2nd_max = a, b;
else:
    1st_max = b;
    2nd_max = a;
if 1st_max > c then
    if 2nd_max > c then:
        3rd_max = c;
    else:
        3rd_max = 2nd_max;
        2nd_max = c;
else:
    1st_max = c;
    2nd_max = 1st_max;
    3rd_max = 2nd_max;
print(f"Sorted list: 1st_max, 2nd_max, 3rd_max");


"""
Задача: Показать кандидату этот код (Надо сделать так, чтобы IDE не подчеркивала ошибки. Я такой скрин уже сделал - он
вроде и цветной, но без намеков на присутствующие ошибки. Скрин лежит в файле task_01_sorting_number_01.png)
и пусть кандидат объяснит, что должен делать этот код и найдет все возможные ошибки в этом коде.

Все комментарии написаны после кода лишь для того, чтобы строки кода нумеровались с единицы.
По этой же причине между строками кода нет разделяющих строк. I'm sorry. Так надо.

Специально сделанные ошибки в этом коде:

1. Сам алгоритм в самом начале программы некорректный. Сначала мы сравниваем на уникальность переменные, которые еще не
определены, что уже вызовет ошибку и только после этого запрашиваем ввод значений для этих переменных. При этом после
того, как нужные значения переменных были указаны, повторной проверки на уникальность введенных значений мы не
выполняем. То есть, программа выполнится даже в том случае, если мы введем неуникальные значения чисел.


2. В строках 4, 5 и 6, в которых мы осуществляем ввод значений нет преобразования введенных значений к числовому типу.
Метод input в Python всегда возвращает строковый тип. Программа будет работать и так, но не факт, что именно так, как
мы ожидаем - можно получить баги. Нужно преобразовать введенные значения в численный тип.
Нужно переписать эти строки примерно вот так:

a = int(input("Input first number (A): "))


3. В конце 12-ой строчки нет символа двоеточия.


4. Строчки 19, 20 и 21 перепутаны местами - неправильно присвоятся значения переменным. 

Должно быть вот так:

    rd3_max = nd2_max
    nd2_max = st1_max
    st1_max = c


5. В строке 22 выведется просто заданный текст, значения переменных не подставятся. Чтобы подставились значения
переменных их нужно взять в фигурные скобки {}

6. В конце всех условных конструкий написано слово "then" (if ... then ...). В python слово "then" не используется.

7. В конце всех строк стоит символ "точка с запятой". В python такой синтаксис не работает. Это не pascal.

8. Часть переменных записаны синтаксически некорректно - названия переменных не должны начинаться с цифры! 

9. Переменные a, b и c хоть и названы кореектно с точки зрения синтаксиса, но с точки зрения PEP8 такие названия
переменных не несут никакой смысловой нагрузки. Надо бы их как-то получше назвать.  


Далее, если кандидат отдупляет, что это за код такой, то можно его попросить, чтобы он отрефакторил этот код как-то
пооптимальнее. А способов тут несколько. Вот один из вариантов:

def main():
    num_a = float(input("Введите первое число (A): "))
    num_b = float(input("Введите второе число (B): "))
    num_c = float(input("Введите третье число (C): "))

    if num_a != num_b and num_b != num_c and num_a != num_c:
        sorted_numbers = sorted([num_a, num_b, num_c], reverse=True)
        print("Числа в порядке убывания:", sorted_numbers)
    else:
        print("Есть повторяющиеся числа. Пожалуйста, введите три различных числа.")


if __name__ == "__main__":
    main()


Еще можно попросить кандидата, чтобы он переписал код таким образом, чтобы программа запрашивала числа A, B и C
бесконечно до тех пор, пока пользователь не введет действительно все различные числа. Тогда код будет примерно таким
(Один из вариантов. Может и не самый лучший. Просто вариант. Добавили return-ы в main() и в основом блоке
программы сделали цикл).

def main():
    num_a = float(input("Введите первое число (A): "))
    num_b = float(input("Введите второе число (B): "))
    num_c = float(input("Введите третье число (C): "))

    if num_a != num_b and num_b != num_c and num_a != num_c:
        sorted_numbers = sorted([num_a, num_b, num_c], reverse=True)
        print("Числа в порядке убывания:", sorted_numbers)
        return True
    else:
        print("Есть повторяющиеся числа. Пожалуйста, введите три различных числа.")
        return False


if __name__ == "__main__":
    while not main():
        pass


"""


"""
---=== ОРИГИНАЛ ЗАДАЧИ ===---
А это оригинал этой же задачи на псевдокоде, в котором также специально заложены ошибки.
Причем список этих ошибок в этом псевдокоде какой-то не совсем полный и не совсем правильный -
лично у меня самое начало программы вызывает сомнения. Ну да бог с ним - здесь в оригинальной
задаче я ничего править не буду - все оставлю так, как придумал автор.
 
Что должна делать эта программа: Приложение запрашивает на ввод 3 различных числа (точнее,
эти числа должны быть обязательно различными и программа должна это проверить), сортирует их
и выводит в порядке убывания.

В коде этой программы на псевдокоде есть вот такие ошибки (Это не я придумал эти ошибки и
я с ними частично не согласен. Тем более они тут перечислены не все):

 - сравнение на 2-й строке не будет выполнено - не проверяется важное условие
 - на 12-й строке нет скобки
 - на 8-й строке неправильно написано Else
 - на 18-й и 20-й строках операции перепутаны местами
 - на 21-й строке выводится просто заданный текст, а не посчитанные переменные.

Исходник задачи на псевдокоде:

1.  Write: "Enter 3 different numbers: A, B and C"
2.  If A = B or A = C or B = C do
3.  Write: "Entered numbers are not different, please repeat."
4.  Read (A, B, C)

5.  If A > B do (
6.      1st_max = A
7.      2nd_max = B
8.  ) elze (
9.      1st_max = B
10.     2nd_max = A)

11. If 1st_max > C do (
12.     if 2nd_max > C do
13.                 3rd_max = C)
14.     else (
15.         3rd_max = 2nd_max
16.         2nd_max = C)
17. ) else (
18.     1st_max = C
19.     2nd_max = 1st_max
20.     3rd_max = 2nd_max)

21. Write: "1st_max, 2nd_max, 3rd_max"
"""
